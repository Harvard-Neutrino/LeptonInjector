from setuptools import setup

__version__ = "0.0.1"

builddir = "@PROJECT_BINARY_DIR@/"
sourcedir = "@PROJECT_SOURCE_DIR@/"

from typing import (
    Any,
    Callable,
    Dict,
    Iterable,
    Iterator,
    List,
    Optional,
    Tuple,
    TypeVar,
    Union,
)

try:
    from setuptools import setup, find_packages, Extension
    from setuptools.command.build_ext import build_ext
except ImportError:
    from distutils import setup, find_packages, Extension
    from distutils.command.build_ext import build_ext

import os
import sys
import platform
import pathlib
import shutil

suffix = None
if platform.system() == "Linux":
    suffix = ".so"
elif platform.system() == "Darwin":
    suffix = ".dylib"
elif platform.system() == "Windows":
    suffix = ".pyd"

class PreBuiltExtension(Extension):
    def __init__(self, name, path, *args: Any, **kwargs: Any):
        self.path = path
        super().__init__(name, [], *args, **kwargs)

class build_PreBuiltExtensions(build_ext):
    def run(self):
        extension_names = []
        for ext in (x for x in self.extensions if isinstance(x, PreBuiltExtension)):
            source = pathlib.PurePath(f"{ext.path}{suffix}")
            build_dir = pathlib.PurePath(self.get_ext_fullpath(ext.name)).parent
            os.makedirs(build_dir, exist_ok=True)
            shutil.copy(f"{source}", f"{build_dir}/{source.name}")
            extension_name = source.name.split('.')[0]
            extension_names.append(extension_name)
        with open(f"{self.build_lib}/{self.distribution.ext_package}/__init__.py", "w") as f:
            for name in extension_names:
                f.write(f"from . import {name}\n")
        shutil.copy(f"{builddir}/libLeptonInjector.so", f"{self.build_lib}/{self.distribution.ext_package}/libLeptonInjector.so")

def find_extension_file(directory, prefix):
    expected_prefix = f"{prefix}.cpython-{str(sys.version_info.major) + str(sys.version_info.minor)}"
    print(expected_prefix)
    for path, _, filenames in os.walk(directory):
        for filename in filenames:
            filename = pathlib.PurePath(filename)
            if filename.stem.startswith(expected_prefix) and filename.suffix == suffix:
                return os.path.join(path, filename.stem)

def get_extension(name):
    lower_name = name.lower()
    return PreBuiltExtension(
            lower_name,
            find_extension_file(os.path.join(builddir, f"projects/{lower_name}/"), name),
    )

ext_modules = [
    get_extension("utilities"),
    get_extension("math"),
    get_extension("dataclasses"),
    get_extension("geometry"),
    get_extension("detector"),
    get_extension("crosssections"),
    get_extension("distributions"),
    get_extension("injection"),
]

setup(
    name="leptoninjector",
    version=__version__,
    author="Austin Schneider, Nicholas Kamp",
    author_email="aschn@mit.edu, nwkamp@mit.edu",
    url="https://github.com/Harvard-Neutrino/LeptonInjector",
    description="LeptonInjector, a tool for neutrino and BSM interaction final state simulation, injection, and weighting.",
    long_description="",
    ext_package = "leptoninjector",
    ext_modules = ext_modules,
    package_data = {"leptoninjector": ["libLeptonInjector.so"]},
    cmdclass = {'build_ext': build_PreBuiltExtensions},
    zip_safe=False,
    python_requires=">=3.7",
)

